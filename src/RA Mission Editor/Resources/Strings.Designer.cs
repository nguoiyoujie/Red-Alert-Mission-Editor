//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RA_Mission_Editor.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RA_Mission_Editor.Resources.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment
        ///
        ///Saves a comment for the map designer&apos;s convenience. Comments have no impact on gameplay..
        /// </summary>
        internal static string Comment {
            get {
                return ResourceManager.GetString("Comment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allies
        ///
        ///Toggles whether this house sees the specified house as friendly. This relationship is one-way; for mutual friendship, the other house must have the same setting for this house..
        /// </summary>
        internal static string HouseType_Allies {
            get {
                return ResourceManager.GetString("HouseType_Allies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Color
        ///
        ///Sets the color override for the house&apos;s objects. If Secondary Color is also set, this sets the color of buildings and of all objects on the radar screen..
        /// </summary>
        internal static string HouseType_Color {
            get {
                return ResourceManager.GetString("HouseType_Color", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Country
        ///
        ///Sets the country override that this house will play as, similar to how players receive their chosen countries in multiplayer or skirmish games.
        /// </summary>
        internal static string HouseType_Country {
            get {
                return ResourceManager.GetString("HouseType_Country", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credits
        ///
        ///Sets the credits (x100) that the house has at the start of the game. Whether these are ore or cash is determined by the FillSilos variable in the Basic section..
        /// </summary>
        internal static string HouseType_Credits {
            get {
                return ResourceManager.GetString("HouseType_Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buildings Get Instantly Captured
        ///
        ///Toggle to require only one Engineer to capture a building owned by this house.
        /// </summary>
        internal static string HouseType_InstantCapture {
            get {
                return ResourceManager.GetString("HouseType_InstantCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IQ
        ///
        ///Sets the IQ level for the house that the game and AI will reference.
        ///It is recommended to set this to 0 for human controlled houses.
        /// </summary>
        internal static string HouseType_IQ {
            get {
                return ResourceManager.GetString("HouseType_IQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multipliers (Firepower, Ground Speed, Air Speed, Armor, ROF, Cost, Build Time)
        ///
        ///Sets the multipliers applied to a country&apos;s stats..
        /// </summary>
        internal static string HouseType_Multipliers {
            get {
                return ResourceManager.GetString("HouseType_Multipliers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No Building Crew
        ///
        ///Toggle to mark this house to not spawn infantry inside of destroyed buildings..
        /// </summary>
        internal static string HouseType_NoCrew {
            get {
                return ResourceManager.GetString("HouseType_NoCrew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Player Control
        ///
        ///Toggles whether the house can be controlled by the player.
        ///The house identified as the Player in the Basic section will always be controlled by the player regardless of this setting.
        /// </summary>
        internal static string HouseType_PlayerControl {
            get {
                return ResourceManager.GetString("HouseType_PlayerControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Secondary Color
        ///
        ///Sets the alternate color for the house&apos;s units and infantry.
        ///Set to blank to default to the Color setting..
        /// </summary>
        internal static string HouseType_SecondaryColor {
            get {
                return ResourceManager.GetString("HouseType_SecondaryColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tech Level
        ///
        ///Sets the technology level of the house, which affects the availability of their tech tree..
        /// </summary>
        internal static string HouseType_TechLevel {
            get {
                return ResourceManager.GetString("HouseType_TechLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Autocreate
        ///
        ///Toggles whether this team is included in the autocreate list that the house owning the teamtype use when its autocreate behavior is activated..
        /// </summary>
        internal static string TeamType_Autocreate {
            get {
                return ResourceManager.GetString("TeamType_Autocreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Avoid Threats
        ///
        ///Toggles whether the team will attempt to path around threats..
        /// </summary>
        internal static string TeamType_AvoidThreats {
            get {
                return ResourceManager.GetString("TeamType_AvoidThreats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initial Number
        ///
        ///&lt;WIP&gt; Effect to be researched..
        /// </summary>
        internal static string TeamType_InitNum {
            get {
                return ResourceManager.GetString("TeamType_InitNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum
        ///
        ///Sets the maximum number of instances of this teamtype can be created by the game. 
        ///Create Teams will not create a team if the maximum is reached.
        /// </summary>
        internal static string TeamType_Maximum {
            get {
                return ResourceManager.GetString("TeamType_Maximum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name
        ///
        ///Sets the unique name identifier of the teamtype..
        /// </summary>
        internal static string TeamType_Name {
            get {
                return ResourceManager.GetString("TeamType_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Owner
        ///
        ///Sets the house that the team belongs to..
        /// </summary>
        internal static string TeamType_Owner {
            get {
                return ResourceManager.GetString("TeamType_Owner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prebuild
        ///
        ///Toggles whether the AI attempts to always have the members of the team prebuilt as part of its unit pool before the creation of the team. Only one copy of the team is prebuilt that way..
        /// </summary>
        internal static string TeamType_Prebuild {
            get {
                return ResourceManager.GetString("TeamType_Prebuild", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Priority
        ///
        ///Sets the priority level of the team. Teams with higher priority levels can recruit members from lower priority teams. In addition, teams with higher priority are weighted more heavily when AI chooses a team to autocreate.
        /// </summary>
        internal static string TeamType_Priority {
            get {
                return ResourceManager.GetString("TeamType_Priority", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reinforce
        ///
        ///Toggles whether the AI will dip into its unit pool to join an instance of the team when some of its members have been destroyed..
        /// </summary>
        internal static string TeamType_Reinforce {
            get {
                return ResourceManager.GetString("TeamType_Reinforce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suicide
        ///
        ///Toggles whether the team will follow their script without breaking from it when attacked.
        ///When it is off, the team will interrupt their current mission if attacked..
        /// </summary>
        internal static string TeamType_Suicide {
            get {
                return ResourceManager.GetString("TeamType_Suicide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Team Missions
        ///
        ///Lists, in order of execution, the actions to be undertaken by the Team..
        /// </summary>
        internal static string TeamType_TeamMissions {
            get {
                return ResourceManager.GetString("TeamType_TeamMissions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members
        ///
        ///Sets the team members. Up to 5 sets of groups can be set. The sets can have the same type (e.g. E1:5, E2:1, E1:3) to insert a different unit type between one larger group.
        ///
        ///Iran&apos;s modifications allow Buildings to be used here as part of paradrops. Use at your own risk..
        /// </summary>
        internal static string TeamType_Techno {
            get {
                return ResourceManager.GetString("TeamType_Techno", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger Tag
        ///
        ///Sets the trigger to be attached to the teamtype.
        ///Tag names with no matching triggers are ignored by the game.
        ///Leave blank to attach no triggers..
        /// </summary>
        internal static string TeamType_TriggerTag {
            get {
                return ResourceManager.GetString("TeamType_TriggerTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waypoint
        ///
        ///Sets the waypoint from which the team will be found or spawned from.
        ///For Create Teams, objects closest to this waypoint will join the team if possible.
        ///For Reinforcement Teams, the waypoint denotes their spawn point..
        /// </summary>
        internal static string TeamType_Waypoint {
            get {
                return ResourceManager.GetString("TeamType_Waypoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AI Repairable
        ///
        ///This serves two functions:
        /// 1. If the owning house has its IQ above [IQ]RepairSell, the AI will repair the building once its health depletes below the rules RepairThreshhold
        /// 2. If the owning house matches the Player in the [Base] section, the AI will add this building to the base node once it is destroyed. This allows the mapper to skip placement of base nodes for already placed buildings.
        ///
        ///Note: Construction Yards are hardcoded to always repair..
        /// </summary>
        internal static string TechnoType_AIRepairable {
            get {
                return ResourceManager.GetString("TechnoType_AIRepairable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AI Sellable
        ///
        ///This may be strange but bear with me:
        ///    According to released code from the Remaster, if the owning house has its IQ above [IQ]RepairSell, has its TechLevel above [IQ]SellBack, and there is no Trigger Tag attached, there is a chance that this building will be sold when the building&apos;s health is depleted below the condition red level (typically 25%).
        ///
        ///This only applies if the building is actually sellable.
        ///Note: Construction Yards are hardcoded to never be sold..
        /// </summary>
        internal static string TechnoType_AISellable {
            get {
                return ResourceManager.GetString("TechnoType_AISellable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Coordinates
        ///
        ///Sets the coordinate position of the object in cells.
        ///{0,0} is the top left corner of the map..
        /// </summary>
        internal static string TechnoType_Coordinates {
            get {
                return ResourceManager.GetString("TechnoType_Coordinates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Facing
        ///
        ///Sets the facing direction of the object, in the clockwise direction.
        ///0 = North
        ///32 = North-East
        ///64 = East
        ///96 = South-East
        ///128 = South
        ///160 = South-West
        ///192 = West
        ///224 = North-West.
        /// </summary>
        internal static string TechnoType_Facing {
            get {
                return ResourceManager.GetString("TechnoType_Facing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Owner
        ///
        ///Sets the house that the object belongs to..
        /// </summary>
        internal static string TechnoType_Owner {
            get {
                return ResourceManager.GetString("TechnoType_Owner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strength
        ///
        ///Sets the factional hitpoints of the object at the start of the game.
        ///0 = 0% hitpoints
        ///128 = 50% hitpoints
        ///256 = 100% hitpoints.
        /// </summary>
        internal static string TechnoType_Strength {
            get {
                return ResourceManager.GetString("TechnoType_Strength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SubCell
        ///
        ///Sets the infantry sub-cell position of the object in a cell..
        /// </summary>
        internal static string TechnoType_SubCell {
            get {
                return ResourceManager.GetString("TechnoType_SubCell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trigger Tag
        ///
        ///Sets the trigger to be attached to the object.
        ///Tag names with no matching triggers are ignored by the game.
        ///Leave blank to attach no triggers..
        /// </summary>
        internal static string TechnoType_TriggerTag {
            get {
                return ResourceManager.GetString("TechnoType_TriggerTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type
        ///
        ///Sets what the object identifies as..
        /// </summary>
        internal static string TechnoType_Type {
            get {
                return ResourceManager.GetString("TechnoType_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unit Mission
        ///
        ///Sets the mission for object to execute on mission initialization.
        ///Leave blank to default to &apos;Guard&apos;..
        /// </summary>
        internal static string TechnoType_UnitMission {
            get {
                return ResourceManager.GetString("TechnoType_UnitMission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Red Alert Map and Mission Editor.
        /// </summary>
        internal static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Action
        ///
        ///Sets one of the actions to be performed by the triggertype.
        /// </summary>
        internal static string TriggerType_Action {
            get {
                return ResourceManager.GetString("TriggerType_Action", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event
        ///
        ///Sets one of the conditional events to be checked by the triggertype.
        /// </summary>
        internal static string TriggerType_Event {
            get {
                return ResourceManager.GetString("TriggerType_Event", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Link Mode (Event)
        ///
        ///Sets the link behavior between the event and actions of the triggertype.
        /// </summary>
        internal static string TriggerType_EventType {
            get {
                return ResourceManager.GetString("TriggerType_EventType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name
        ///
        ///Sets the unique name identifier of the triggertype..
        /// </summary>
        internal static string TriggerType_Name {
            get {
                return ResourceManager.GetString("TriggerType_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Owner
        ///
        ///Sets the house that the triggertype belongs to..
        /// </summary>
        internal static string TriggerType_Owner {
            get {
                return ResourceManager.GetString("TriggerType_Owner", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Persistance Mode (Repeating)
        ///
        ///Sets the repeating behavior of the triggertype..
        /// </summary>
        internal static string TriggerType_Repeating {
            get {
                return ResourceManager.GetString("TriggerType_Repeating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifying the executable reference may cause the program to close if the reference cannot be loaded. Save your existing map before proceeding? Click &apos;Yes&apos; to save. Click &apos;No&apos; to proceed without saving..
        /// </summary>
        internal static string Warn_ModifyExe {
            get {
                return ResourceManager.GetString("Warn_ModifyExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You will lose unsaved changes if you proceed to modify the INI directly. Click &apos;Yes&apos; to save. Click &apos;No&apos; to proceed without saving.
        /// </summary>
        internal static string Warn_ModifyIni {
            get {
                return ResourceManager.GetString("Warn_ModifyIni", resourceCulture);
            }
        }
    }
}
